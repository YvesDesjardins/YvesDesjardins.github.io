- name: ReadditBot
  date: Feb 2020
  link: github.com/YvesDesjardins/ReadditBot
  github: yvesdesjardins/ReadditBot
  description: | # this will include new lines to allow paragraphs
    Simple Reddit bot built in <mark>NodeJS</mark> to output comments posted to r/all. Unit testing using <mark>Chai</mark> and <mark>Mocha</mark> with hosting on <mark>Heroku</mark>.

- name: GraphQL Server Test
  date: May - May 2019
  link: github.com/YvesDesjardins/graphql_server_test
  github: yvesdesjardins/graphql_server_test
  description: | # this will include new lines to allow paragraphs
    Playground project to test implementation of <mark>GraphQL</mark> into a <mark>NodeJS</mark> <mark>Express</mark> backend. The project makes use of <mark>Prisma</mark> for database management and is hosted on <mark>Heroku</mark> for remote access and testing.

- name: CafeDesk
  date: Mar - Apr 2019
  link: github.com/yvesdesjardins/cafedesk-server
  github: yvesdesjardins/cafedesk-server
  description: | # this will include new lines to allow paragraphs
    This is a single page app built in <mark>ReactJS</mark> which extends the functionality of Yelp to help users looking for cafes to study/work in. The project was completed by a group of 3 including myself and was planned, designed and coded from the ground up by us. I was responsible for building out the back-end with one other member and providing mentorship as needed with the project. The back-end was built using <mark>Express</mark> <mark>Axios</mark> <mark>Sequelize</mark> and <mark>PostgreSQL</mark>. For unit testing we implemented <mark>Jest</mark> along with CI support with <mark>CircleCI</mark> CD and hosting with <mark>Heroku</mark>.

- name: Jungle
  date: Mar 2019
  link: github.com/yvesdesjardins/jungle-rails
  github: yvesdesjardins/jungle-rails
  description: | # this will include new lines to allow paragraphs
    An e-commerce app built with <mark>Ruby</mark> and <mark>Ruby on Rails</mark>. I inherited an existing template and was responsible for implementing new features such as purchasing, proper cart behaviour and emailing invoices while growing accustomed to learning a new language and framework. I also used this as a base to look into unit and feature testing via <mark>RSpec</mark> <mark>Capybara</mark> and <mark>Poltergeist</mark>.

- name: Chatty-App
  date: Mar 2019
  link: github.com/yvesdesjardins/chattyapp
  github: yvesdesjardins/chattyapp
  description: | # this will include new lines to allow paragraphs
    This was a single page app built in <mark>ReactJS</mark> to emulate a Slack style chat program. I have implemented the use of hooks into this project in order to get more exposure to this new addition. I also utilized <mark>WebSockets</mark> for communication between the back-end server and any clients who have connected. <mark>JSX</mark> was also heavily utilized to correctly build the elements and have them display correctly to clients.

- name: Do It
  date: Feb - Mar 2019
  link: github.com/yvesdesjardins/smart-todo
  github: yvesdesjardins/smart-todo
  description: | # this will include new lines to allow paragraphs
    This project was a single page "smart" todo list that I completed in a group of 3. I was responsible for building out the back-end of the project along with the database. Through this experience I have further developed my knowledge of proper <mark>Git</mark> usage in groups, <mark>SQL</mark> and <mark>Knex</mark> for database work and routing with <mark>Express</mark>. 

- name: Tweeter
  date: Feb 2019
  link: github.com/yvesdesjardins/tweeter
  github: yvesdesjardins/tweeter
  description: | # this will include new lines to allow paragraphs
    This is a project to emulate a Twitter style site as a single-page web app. I utilized <mark>SASS</mark> <mark>jQuery</mark> and <mark>Javascript</mark> for the front-end and <mark>MongoDB</mark> along with <mark>Express</mark> for the back-end.

- name: Tiny-App
  date: Feb 2019
  link: github.com/yvesdesjardins/tinyapp
  github: yvesdesjardins/tinyapp
  description: | # this will include new lines to allow paragraphs
    A single page web app built to emulate webpage shorteners like Bit.ly. I built this project using <mark>Javascript</mark> and <mark>EJS</mark> for the front-end, <mark>NodeJS</mark> and <mark>Express</mark> for the back-end.
